//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import { Observable } from "rxjs";
import { HttpClient } from "@angular/common/http";
import {
	MovieApiController,
	NewController,
	TranslateDemoController,
} from "./controller-definitions";
import {
	asQueryable,
	implementHttpCallsInController,
} from "./library/miscellaneous";
import { IQueryable } from "./library/queryable";
import { ExecutionInsights } from "./execution-rules";

/**
 * Class that provides methods for making http requests to backend API.
 * Properties, representing backend controllers, are objects that contain
 * methods, which are actions of that specific controller.
 *
 */
export class BaseEndpointsService<TAnalytics extends boolean = true> {
	public readonly server: string;

	constructor(public http: HttpClient, server: string) {
		this.server = server;

		for (let controllerName in this) {
			if (controllerName === "http" || controllerName === "server")
				continue;

			implementHttpCallsInController(
				controllerName,
				this[controllerName],
				this.http,
				this.server,
				true
			);
		}
	}

	protected ctx: EndpointsContext<TAnalytics> =
		new EndpointsContext<TAnalytics>(this, {} as any);

	public MovieApi = new MovieApiController();
	public New = new NewController();
	public TranslateDemo = new TranslateDemoController();
}

type Constructor<T = Record<string, unknown>> = {
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	new (...args: any[]): T;
	prototype: T;
};

export function BaseEndpointsServiceConstructorFn<
	TAnalytics extends boolean = true
>(
	showAnalytics: TAnalytics = true as TAnalytics
): Constructor<BaseEndpointsService<TAnalytics>> {
	return BaseEndpointsService<TAnalytics>;
}

export class EndpointsContext<TAnalytics extends boolean = true> {
	/**
	 *
	 * @param endpointsService
	 * @param currentCustomQueryName Name of the method that declares the query. (This is the name backend endpoint would use)
	 */
	constructor(
		protected endpointsService: BaseEndpointsService<TAnalytics>,
		currentCustomQueryName: { name: string }
	) {}

	public MovieApi = createQueryableController<MovieApiController, TAnalytics>(
		"MovieApi",
		new MovieApiController(),
		this.endpointsService
	);
	public New = createQueryableController<NewController, TAnalytics>(
		"New",
		new NewController(),
		this.endpointsService
	);
	public TranslateDemo = createQueryableController<
		TranslateDemoController,
		TAnalytics
	>("TranslateDemo", new TranslateDemoController(), this.endpointsService);
}

type TController = MovieApiController | NewController | TranslateDemoController;

function createQueryableController<
	T extends TController & { [k in keyof T & string]: (...args: any) => any },
	TAnalytics extends boolean = true
>(
	controllerName: string,
	controller: T,
	endpointsService: BaseEndpointsService<TAnalytics>
): {
	[TAction in keyof T]: (
		...args: Parameters<T[TAction]>
	) => TAnalytics extends true
		? IQueryable<
				ReturnType<T[TAction]> extends Observable<infer U> ? U : never,
				TAction extends string ? ExecutionInsights[TAction] : never
		  >
		: IQueryable<
				ReturnType<T[TAction]> extends Observable<infer U> ? U : never
		  >;
} {
	implementHttpCallsInController(
		controllerName,
		controller,
		endpointsService.http,
		endpointsService.server,
		false
	);

	let actionNames = Object.getOwnPropertyNames(
		Object.getPrototypeOf(controller)
	).filter((name) => name !== "constructor");

	// @ts-ignore
	let result = {} as any;
	for (let action of actionNames) {
		// ovo se moze dolje ubaciti
		let overridenActionCall = controller[action] as (
			...args: any
		) => Observable<any>;
		result[action] = function () {
			return asQueryable(overridenActionCall(...arguments));
		};
	}

	return result;
}
