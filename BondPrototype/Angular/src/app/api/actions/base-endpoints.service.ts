
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import {Observable} from 'rxjs';
import {HttpClient} from '@angular/common/http';
import {MovieApiController, TranslateDemoController} from "./controller-definitions";
import {implementHttpCallsInController} from './library/miscellaneous';
import {IQueryable} from './library/queryable';
/**
 * Class that provides methods for making http requests to backend API.
 * Properties, representing backend controllers, are objects that contain
 * methods, which are actions of that specific controller.
 * 
 */
export class BaseEndpointsService {
    
    public readonly server: string;

    constructor(public http: HttpClient, server: string) {
       
        this.server = server;
 
        for (let controllerName in this) {
            if (controllerName === 'http' || controllerName === 'server') continue;

            implementHttpCallsInController(this[controllerName], this.http, this.server, true);
        }

    }
    
    public MovieApi = new MovieApiController();
	public TranslateDemo = new TranslateDemoController();
}


export class EndpointsContext {

    /**
     *
     * @param endpointsService
     * @param currentCustomQueryName Name of the method that declares the query. (This is the name backend endpoint would use)
     */
    constructor(protected endpointsService: BaseEndpointsService, currentCustomQueryName: {name: string}) {
    }

    public MovieApi = createQueryableController(new MovieApiController(), this.endpointsService);
	public TranslateDemo = createQueryableController(new TranslateDemoController(), this.endpointsService);
}

// @ts-ignore
function createQueryableController<TController>(controller: TController, endpointsService: BaseEndpointsService): { [TAction in keyof TController]: (...args: Parameters<TController[TAction]>) => IQueryable<ReturnType<TController[TAction]> extends Observable<infer U> ? U : never> } {
    implementHttpCallsInController(controller, endpointsService.http, endpointsService.server, false);

    let actionNames = Object.getOwnPropertyNames(Object.getPrototypeOf(controller)).filter(name => name !== 'constructor');

    // @ts-ignore
    let result = {} as any;
    for (let action of actionNames) {
        // ovo se moze dolje ubaciti
        let overridenActionCall = controller[action] as (...args: any) => Observable<any>;
        result[action] = function () {
            return overridenActionCall(...arguments).asQueryable();
        };
    }

    return result;
}