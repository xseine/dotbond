//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

import {Directive, EventEmitter, Input, Output, TemplateRef, ViewContainerRef} from "@angular/core";
import {ApiControllers} from '../../api/actions/library/miscellaneous';

export type TypeSafeControllers = ApiControllers & { [_: string]: { [_: string]: (...args: any) => any } } 
// Note: last line fixes Controllers[TController][TAction] not assignable to (...args: any) => any

@Directive({selector: '[action]'})
export class ActionDirective<TController extends keyof TypeSafeControllers, TAction extends keyof TypeSafeControllers[TController]> {
    
    @Input('action') typeToken: [TController | keyof TypeSafeControllers, TAction | keyof TypeSafeControllers[TController]];
    
    constructor(private tpl: TemplateRef<Context<TController, TAction>>,
                private vcr: ViewContainerRef) {
    }
    // Note: Injected objects set the type
}

class Context<TController extends keyof TypeSafeControllers, TAction extends keyof TypeSafeControllers[TController]> {
    $implicit!: Parameters<TypeSafeControllers[TController][TAction]>[0];
    action!: TController;

    constructor(value: TController) {
        this.$implicit = {} as any;
        this.action = value;
    }
}